AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template deploys an ECS capacity provider to the provided VPC and subnets
  using an Auto Scaling Group and associates it with the ECS cluster

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  Cluster:
    Description: The ECS Cluster ID that this capacity provider should be associaled with
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC this ECS cluster should be deployed to

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Choose which subnets this ECS cluster should be deployed to

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The Security Group to use for the ECS cluster hosts

  ClusterInstanceType:
    Type: String
    Description: EC2 instance type to use in the ECS cluster
    Default: c7g.large

  ClusterDeisedSize:
    Type: Number
    Description: Number of EC2 instances to initially launch in the ECS cluster
    Default: 2
    MinValue: 1

  ClusterMaxSize:
    Type: Number
    Description: The maximum number of EC2 instances to launch in the ECS cluster
    Default: 5
    MinValue: 1

  ECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: ECS-Optimized AMI ID
    Default: /aws/service/bottlerocket/aws-ecs-1/arm64/latest/image_id

Resources:
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling:
          MaximumScalingStepSize: 4
          MinimumScalingStepSize: 1
          Status: ENABLED
          TargetCapacity: 100

  CapacityProviderAssociation:
    Type: "AWS::ECS::ClusterCapacityProviderAssociations"
    Properties:
      Cluster: !Ref Cluster
      CapacityProviders:
        - !Ref CapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 1
          Weight: 10
          CapacityProvider: !Ref CapacityProvider

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref ClusterDeisedSize
      MaxSize: !Ref ClusterMaxSize
      DesiredCapacity: !Ref ClusterDeisedSize
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECS-Host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-Launch-Template
      LaunchTemplateData:
        ImageId: !Ref ECSAMI
        SecurityGroupIds:
          - !Ref SecurityGroup
        InstanceType: !Ref 'ClusterInstanceType'
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            [settings.ecs]
            cluster = "${Cluster}"

            [settings.cloudformation]
            should-signal = true
            stack-name = "${AWS::StackName}"
            logical-resource-id = "AutoScalingGroup"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ec2-instance-${EnvironmentName}
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Principal:
              Service: 'ec2.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: !Sub ec2-instance-${EnvironmentName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStackResource'
                  - 'cloudformation:SignalResource'
                Resource:
                  Fn::Sub: 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'

Outputs:
  CapacityProvider:
    Description: A reference to the ECS capacity provider
    Value: !Ref CapacityProvider
